// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Context.Contexts;

#nullable disable

namespace ConsoleInit.Migrations
{
    [DbContext(typeof(SaalDigitalContext))]
    partial class SaalDigitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Entity.DBs.Auth.Credentials", b =>
                {
                    b.Property<Guid>("IdCredentials")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUserCreater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserModifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCredentials");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("credentials", "auth");
                });

            modelBuilder.Entity("Model.Entity.DBs.Auth.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("DateTimeOffset");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("session", "auth");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.Album", b =>
                {
                    b.Property<Guid>("IdAlbum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("IdUserCreater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserModifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("IdAlbum");

                    b.ToTable("album", "dbo");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.AlbumImage", b =>
                {
                    b.Property<Guid>("IdAlbumImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("IdAlbum")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAlbumImage");

                    b.HasIndex("IdAlbum");

                    b.HasIndex("IdImage");

                    b.ToTable("albumimage", "dbo");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.ImageFile", b =>
                {
                    b.Property<Guid>("IdImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("IdUserCreater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserModifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdImage");

                    b.ToTable("imagefile", "dbo");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("IdUserCreater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserModifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTimeOffset?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTimeOffset")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("user", "dbo");
                });

            modelBuilder.Entity("Model.Entity.DBs.Auth.Credentials", b =>
                {
                    b.HasOne("Model.Entity.DBs.Dbo.User", "User")
                        .WithOne("Credentials")
                        .HasForeignKey("Model.Entity.DBs.Auth.Credentials", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_idUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entity.DBs.Auth.Session", b =>
                {
                    b.HasOne("Model.Entity.DBs.Dbo.User", "User")
                        .WithOne("Session")
                        .HasForeignKey("Model.Entity.DBs.Auth.Session", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_IdUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.AlbumImage", b =>
                {
                    b.HasOne("Model.Entity.DBs.Dbo.Album", "Album")
                        .WithMany("AlbumImage")
                        .HasForeignKey("IdAlbum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_albumimage_idAlbum");

                    b.HasOne("Model.Entity.DBs.Dbo.ImageFile", "ImageFile")
                        .WithMany("AlbumImage")
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_albumimage_idImage");

                    b.Navigation("Album");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.Album", b =>
                {
                    b.Navigation("AlbumImage");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.ImageFile", b =>
                {
                    b.Navigation("AlbumImage");
                });

            modelBuilder.Entity("Model.Entity.DBs.Dbo.User", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("Session");
                });
#pragma warning restore 612, 618
        }
    }
}
